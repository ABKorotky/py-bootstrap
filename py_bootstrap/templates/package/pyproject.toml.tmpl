[project]
name = "{name}"
description = "{description}"
readme = "README.md"
requires-python = ">={python_major}.{python_minor}"
license = "Apache-2.0"
license-files = ["LICEN[CS]E*", "AUTHORS.md"]
authors = [{{name = "{author}", email = "{author_email}"}}]
keywords = ["asyncio", "{name}"]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Other Environment",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: {python_major}.{python_minor}",
    "Topic :: Internet",
]
dynamic = ["version", "dependencies"]

[project.urls]
repository = "{repo}.git"
changelog = "{repo}/blob/main/CHANGELOG.md"

[build-system]
requires = [
    "setuptools",
    "wheel"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = {{attr = "{underscored_name}.VERSION"}}
dependencies = {{file = ["requirements.txt"]}}

[tool.setuptools.packages.find]
include = ["{underscored_name}*"]

[tool.setuptools.package-data]
"*" = [
    "make.bat",
    "Makefile",
]

[tool.black]
target-version = ['py{python_major}{python_minor}']
line-length = 80

[tool.isort]
profile = "black"
py_version={python_major}{python_minor}
skip = [".git", ".tox", ".venv"]

[tool.flake8]
exclude = [".git", ".tox", ".venv"]
max-line-length = 88
extend-ignore = ["E203", "E701"]
import-order-style = "pep8"
application-import-names = ["{underscored_name}"]

[tool.mypy]
check_untyped_defs = true
exclude = "/(.venv)"
files = "**/*.py"
follow_imports = "silent"
ignore_missing_imports = true
python_version = "{python_major}.{python_minor}"
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = [
    "arg-type",
    "assignment",
    "attr-defined",
    "method-assign",
]

[tool.coverage.run]
omit = ["tests/*"]
source = ["{underscored_name}"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if t.TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]
fail_under = 95
omit = ["tests/*"]

[tool.tox]
envlist = ["cs", "ann", "utc"]

[tool.tox.env.format]
description = "Formats code by black and isort tools"
deps = ["black", "isort"]
skip_install = true
commands = [
    ["isort", "{underscored_name}"],
    ["black", "{underscored_name}"],
]

[tool.tox.env.cs]
description = "Checks code style by black, isort and flake8 tools"
deps = ["black", "isort", "flake8", "flake8-pyproject"]
skip_install = true
commands = [
    ["isort", "--check-only", "--diff", "{underscored_name}"],
    ["black", "--check", "--diff", "{underscored_name}"],
    ["flake8", "{underscored_name}"],
]

[tool.tox.env.ann]
description = "Checks types annotations by mypy"
deps = ["mypy"]
skip_install = true
commands = [
    ["mypy", "{underscored_name}"],
]

[tool.tox.env.utc]
description = "Runs tests under coverage, prints a text report and builds HTML report"
deps = ["--requirement={{toxinidir}}/requirements.txt", "coverage"]
commands = [
    ["coverage", "run", "--module", "unittest", "discover", "tests"],
    ["coverage", "report"],
    ["coverage", "html"],
]

[tool.tox.env.doc]
description = "Generates documentation using sphinx tool"
deps = ["--requirement={{toxinidir}}/requirements.txt", "sphinx"]
allowlist_externals = ["rm"]
commands = [
    ["rm", "-rf", "docs/modules"],
    ["sphinx-apidoc", "--separate", "--no-toc", "--no-headings", "--module-first", "--output-dir=docs/modules", "--ext-viewcode", "{underscored_name}"],
    ["sphinx-build", "-b", "html", "docs", "docs/build", "-v"],
]

[tool.tox.env.build]
description = "Builds PIP package using build tool"
deps = ["build"]
skip_install = true
allowlist_externals = ["rm"]
commands = [
    ["python", "-m", "build", "--sdist"],
    ["rm", "-rf", "build"],
]


[tool.tox.env.upload]
description = "Uploads generated PIP package to PyPI index"
deps = ["twine"]
skip_install = true
passenv = [
    "PYPI_REPOSITORY_ALIAS",
]
set_env.PYPI_REPOSITORY_ALIAS = {{replace = "env", name = "PYPI_REPOSITORY_ALIAS", default = "testpypi"}}
commands = [
    ["twine", "upload", "--repository={{env:PYPI_REPOSITORY_ALIAS}}", "--verbose", "{{posargs}}"],
]
