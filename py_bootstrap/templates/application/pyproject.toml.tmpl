[project]
name = "{name}"
description = "{description}"
readme = "README.md"
requires-python = ">={python_major}.{python_minor}"
dynamic = ["version", "dependencies"]

[tool.setuptools.dynamic]
version = {{attr = "{underscored_name}.VERSION"}}
dependencies = {{file = ["requirements.txt"]}}

[tool.black]
target-version = ['py{python_major}{python_minor}']
line-length = 80

[tool.isort]
profile = "black"
py_version={python_major}{python_minor}
skip = [".git", ".tox", ".venv"]

[tool.flake8]
exclude = [".git", ".tox", ".venv"]
max-line-length = 88
extend-ignore = ["E203", "E701"]
import-order-style = "pep8"
application-import-names = ["{underscored_name}"]

[tool.mypy]
check_untyped_defs = true
exclude = "/(.venv)"
files = "**/*.py"
follow_imports = "silent"
ignore_missing_imports = true
python_version = "{python_major}.{python_minor}"
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = [
    "arg-type",
    "assignment",
    "attr-defined",
    "method-assign",
]

[tool.coverage.run]
omit = ["tests/*"]
source = ["{underscored_name}"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if t.TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]
fail_under = 95
omit = ["tests/*"]

[tool.tox]
envlist = ["cs", "ann", "utc"]

[tool.tox.env.format]
description = "Formats code by black and isort tools"
deps = ["black", "isort"]
skip_install = true
commands = [
    ["isort", "{underscored_name}"],
    ["black", "{underscored_name}"],
]

[tool.tox.env.cs]
description = "Checks code style by black, isort and flake8 tools"
deps = ["black", "isort", "flake8", "flake8-pyproject"]
skip_install = true
commands = [
    ["isort", "--check-only", "--diff", "{underscored_name}"],
    ["black", "--check", "--diff", "{underscored_name}"],
    ["flake8", "{underscored_name}"],
]

[tool.tox.env.ann]
description = "Checks types annotations by mypy"
deps = ["mypy"]
skip_install = true
commands = [
    ["mypy", "{underscored_name}"],
]

[tool.tox.env.utc]
description = "Runs tests under coverage, prints a text report and builds HTML report"
deps = ["--requirement={{toxinidir}}/requirements.txt", "coverage"]
commands = [
    ["coverage", "run", "--module", "unittest", "discover", "tests"],
    ["coverage", "report"],
    ["coverage", "html"],
]
